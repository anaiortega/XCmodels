# -*- coding: utf-8 -*-
from __future__ import division

import os
import xc_base
import geom
import xc
import math
from model import predefined_spaces
from model.geometry import grid_model as gm
from model.mesh import finit_el_model as fem
from model.boundary_cond import spring_bound_cond as sprbc
from model.sets import sets_mng as sets
from materials import typical_materials as tm
from actions import loads
from actions import load_cases as lcases
from actions import combinations as cc
from actions.earth_pressure import earth_pressure as ep

# AVE San Rafael-Cuarto de la Jara
# PI+PF 105.3

#Auxiliary data
 #Geometry
GH=8                          #gálibo horizontal
GV=5.8                        #gálibo vertical
deckTh=0.80                   #espesor dintel
wallTh=0.70                   #espesor hastiales
baseSlabTh=0.80               #espesor losa de cimentación
Hrelli=1.30                   #ver gráfico en memoria de cálculo
Hrelld=1.27                   #ver gráfico en memoria de cálculo
Hbali=0.65                    #ver gráfico en memoria de cálculo
Hbald=0.65                    #ver gráfico en memoria de cálculo
Hcarr1=2.14                   #ver gráfico en memoria de cálculo
Hcarr2=2.16                   #ver gráfico en memoria de cálculo
Hcarr3=2.13                   #ver gráfico en memoria de cálculo
Hcarr4=2.14                   #ver gráfico en memoria de cálculo
pxcarr1=4                     #posición en matriz xk de carril 1
pxcarr2=5                     #posición en matriz xk de carril 2
pxcarr3=7                     #posición en matriz xk de carril 3
pxcarr4=8                     #posición en matriz xk de carril 4
pyhast1=1                     #posición en la matriz yk del hastial izqdo.
pyhast2=4                     #posición en la matriz yk del hastial drcho.
pxcan1=2                      #posición en matriz xk de canal de cables 1
pxcan2=9                      #posición en matriz xk de canal de cables 2
pxmnp1=1                      #posición en matriz xk X mínima de pasillo 1
pxmxp1=2                      #posición en matriz xk X máxima de pasillo 1
pxmnp2=10                     #posición en matriz xk X mínima de pasillo 2
pxmxp2=11                     #posición en matriz xk X máxima de pasillo 2
anchvia=1.435                 #ancho de vía (m)
hmuret=0.5                    #altura de muretes en extremos de estructura
emuret=0.5                    #espesor de muretes en extremos de estructura

hcarril=0.172

# Valores auxiliares cargas
angrep=45                     #ángulo para repartir cargas que actúan sobre el terraplén
alfa=1.21                     #coeficiente de clasificación
fired=1.27                    #coeficiente de impacto reducido
densrell=2                    #densidad del relleno (t/m3)
densbal=1.8                   #densidad del balasto (t/m3)
Qptren=alfa*fired*125         #carga puntual tren de cargas (kN)
nQptren_carr=4                #nº de cargas puntuales tren de carga en cada carril
distQptren_carr=1.6           #distancia entre cargas puntuales en cada carril
qltren=alfa*fired*40          #carga lineal tren de cargas (kN/m)
qnferr=2.5                    #carga uniforme no ferroviaria en paseos (kN/m2)
scterr=alfa*30                #sobrecarga en terraplén (kN/m2)
qdesc1=alfa*0.7*(8*125)/(2*anchvia)   #carga lineal en situación de descarrilamiento 1 (kN/m)
qdesc2=alfa*0.7*(8*125)/20            #carga lineal en situación de descarrilamiento 2 (kN/m)
Hagua=0.00                            #nivel de agua sobre la cara superior de la losa de cimentación
Kbalasto=8.955e4                      #coef. balasto (kN/m3)
ql_carr_trav=0.6+2.6                  #carga lineal peso carril + traviesas (kN/m)
ql_can_cabl=3                         #carga lineal peso canal de cables (kN/m)
 # tren de carga carreteras
cunifCarr=4                           #carga uniforme tren de cargas carreteras (kN/m2)
qpCarr=100                            #carga puntual tren carreteras
lejesCarr=1.5                         #distancia entre ejes tren carreteras
lruedCarr=2                           #distancia entre ruedas tren de carreteras

eSize=0.30                             #tamaño medio de los elementos
#             *** GEOMETRIC model (points, lines, surfaces) - SETS ***
FEcase= xc.ProblemaEF()
prep=FEcase.getPreprocessor
nodes= prep.getNodeLoader
elements= prep.getElementLoader
elements.dimElem= 3

# Problem type
modelSpace= predefined_spaces.StructuralMechanics3D(nodes) #Defines the dimension of
                  #the space: nodes by three coordinates (x,y,z) and 
                  #three DOF for each node (Ux,Uy,Uz)

# coordinates in global X,Y,Z axes for the grid generation
xList=[0,2.27,4.14,5.11,6.21,7.64,9.27,10.91,12.34,13.44,14.51,16.27,18.40]
yList=[-GH/2-wallTh-0.5,-GH/2-wallTh/2,-GH/2-wallTh/2+wallTh/2+0.2*GH]
yList.append(-yList[2])
yList.append(-yList[1])
yList.append(-yList[0])
zList=[0,baseSlabTh/2+0.2*GV,baseSlabTh/2+0.8*GV,baseSlabTh/2+GV+deckTh/2]
#auxiliary data
lastXpos=len(xList)-1
lastYpos=len(yList)-1
lastZpos=len(zList)-1

# grid model definition
gridGeom= gm.GridModel(prep,xList,yList,zList)

# Grid geometric entities definition (points, lines, surfaces)
# Points' generation
gridGeom.generatePoints()

'''
#Displacements of the grid points in a range
for i in range(1,len(xList)):
    r= gm.IJKRange((i,0,lastZpos),(i,lastYpos,lastZpos))
    gridGeom.movePointsRange(r,xc.Vector([0.0,0.0,-trSlope*xList[i]]))

for j in range(1,len(yList)):
    r=gm.IJKRange((0,j,0),(lastXpos,j,0))
    gridGeom.movePointsRange(r,xc.Vector([0.0,0.0,lnSlope*yList[j]]))

#Slope (in X direction, Y direction or both) the grid points in a range
#syntax: slopePointsRange(ijkRange,slopeX,xZeroSlope,slopeY,yZeroSlope)
#     ijkRange: range for the search.
#     slopeX: slope in X direction, expressed as deltaZ/deltaX 
#                       (defaults to 0 = no slope applied)
#     xZeroSlope: coordinate X of the "rotation axis".
#     slopeY: slope in Y direction, expressed as deltaZ/deltaY)
#                       (defaults to 0 = no slope applied)
#     yZeroSlope: coordinate Y of the "rotation axis".

'''

#Ranges for lines and surfaces
losCimExt_rg= [ gm.IJKRange((0,0,0),(lastXpos,pyhast1+1,0)), gm.IJKRange((0,pyhast2-1,0),(lastXpos,lastYpos,0)) ]
losCimCent_rg= [ gm.IJKRange((0,pyhast1+1,0),(lastXpos,pyhast2-1,0))]
hastIzqInf_rg= [ gm.IJKRange((0,pyhast1,0),(lastXpos,pyhast1,1))]
hastIzqCent_rg= [ gm.IJKRange((0,pyhast1,1),(lastXpos,pyhast1,2))]
hastIzqSup_rg= [ gm.IJKRange((0,pyhast1,2),(lastXpos,pyhast1,lastZpos))]

hastDerInf_rg= [ gm.IJKRange((0,pyhast2,0),(lastXpos,pyhast2,1))]
hastDerCent_rg= [ gm.IJKRange((0,pyhast2,1),(lastXpos,pyhast2,2))]
hastDerSup_rg= [ gm.IJKRange((0,pyhast2,2),(lastXpos,pyhast2,lastZpos))]

dintExt_rg= [ gm.IJKRange((0,pyhast1,lastZpos),(lastXpos,pyhast1+1,lastZpos)), gm.IJKRange((0,pyhast2-1,lastZpos),(lastXpos,pyhast2,lastZpos)) ]
dintCent_rg= [ gm.IJKRange((0,pyhast1+1,lastZpos),(lastXpos,pyhast2-1,lastZpos))]
muretes_rg=[gm.IJKRange((0,0,lastZpos),(0,lastYpos,lastZpos)),gm.IJKRange((lastXpos,0,lastZpos),(lastXpos,lastYpos,lastZpos))]

#Lines generation
muretes=gridGeom.genLinMultiRegion(lstIJKRange=muretes_rg,nameSet='muretes')
muretes.description='Muretes'

#Surfaces generation
losCimExt=gridGeom.genSurfMultiRegion(lstIJKRange=losCimExt_rg,nameSet='losCimExt')
losCimCent=gridGeom.genSurfMultiRegion(lstIJKRange=losCimCent_rg,nameSet='losCimCent')
hastIzqInf=gridGeom.genSurfMultiRegion(lstIJKRange=hastIzqInf_rg,nameSet='hastIzqInf')
hastIzqCent=gridGeom.genSurfMultiRegion(lstIJKRange=hastIzqCent_rg,nameSet='hastIzqCent')
hastIzqSup=gridGeom.genSurfMultiRegion(lstIJKRange=hastIzqSup_rg,nameSet='hastIzqSup')
hastDerInf=gridGeom.genSurfMultiRegion(lstIJKRange=hastDerInf_rg,nameSet='hastDerInf')
hastDerCent=gridGeom.genSurfMultiRegion(lstIJKRange=hastDerCent_rg,nameSet='hastDerCent')
hastDerSup=gridGeom.genSurfMultiRegion(lstIJKRange=hastDerSup_rg,nameSet='hastDerSup')
dintExt=gridGeom.genSurfMultiRegion(lstIJKRange=dintExt_rg,nameSet='dintExt')
dintCent=gridGeom.genSurfMultiRegion(lstIJKRange=dintCent_rg,nameSet='dintCent')



#                         *** MATERIALS *** 
#*Auxiliary data
fcmDeck=(30+8)*1e6      #HA-30
EcDeck=8500*fcmDeck/1e6**(1/3.0)*1e6
fcmWalls=(30+8)*1e6     #HA-30
EcWalls=8500*fcmWalls/1e6**(1/3.0)*1e6
fcmFound=(30+8)*1e6      #HA-30
EcFound=8500*fcmFound/1e6**(1/3.0)*1e6
cpoish=0.2                #Poisson's coefficient of concrete
densh= 2500 #specific mass of concrete (kg/m3)

concrDeck=tm.MaterialData(name='concrDeck',E=EcDeck,nu=cpoish,rho=densh)
concrWalls=tm.MaterialData(name='concrWalls',E=EcWalls,nu=cpoish,rho=densh)
concrFound=tm.MaterialData(name='concrFound',E=EcFound,nu=cpoish,rho=densh)

#Geometric sections
#rectangular sections
from materials.sections import section_properties as sectpr
geomSectMuretes=sectpr.RectangularSection(name='geomSectMuretes',b=emuret,h=hmuret)

# Elastic material-section appropiate for 3D beam analysis, including shear
  # deformations.
  # Attributes:
  #   name:         name identifying the section
  #   section:      instance of a class that defines the geometric and
  #                 mechanical characteristiscs
  #                 of a section (e.g: RectangularSection, CircularSection,
  #                 ISection, ...)
  #   material:     instance of a class that defines the elastic modulus,
  #                 shear modulus and mass density of the material

muretes_mat= tm.BeamMaterialData(name= 'muretes_mat', section=geomSectMuretes, material=concrDeck)
muretes_mat.setupElasticShear3DSection(preprocessor=prep)

# Isotropic elastic section-material appropiate for plate and shell analysis
deck_mat= tm.DeckMaterialData(name= 'deck_mat', thickness= deckTh,material=concrDeck)
deck_mat.setupElasticSection(preprocessor=prep)   #creates de section-material
wall_mat= tm.DeckMaterialData(name= 'wall_mat', thickness= wallTh,material=concrWalls)
wall_mat.setupElasticSection(preprocessor=prep)   #creates de section-material
found_mat= tm.DeckMaterialData(name= 'found_mat', thickness= baseSlabTh,material=concrFound)
found_mat.setupElasticSection(preprocessor=prep)   #creates de section-material

#                         ***FE model - MESH***
muretes_mesh=fem.LinSetToMesh(linSet=muretes,matSect=muretes_mat,elemSize=eSize,vDirLAxZ=xc.Vector([0,0,1]),elemType='ElasticBeam3d',coordTransfType='linear')
muretes_mesh.generateMesh(prep)    # mesh this set of lines

losCimExt_mesh=fem.SurfSetToMesh(surfSet=losCimExt,matSect=found_mat,elemType='ShellMITC4',elemSize=eSize)
losCimCent_mesh=fem.SurfSetToMesh(surfSet=losCimCent,matSect=found_mat,elemType='ShellMITC4',elemSize=eSize)
hastIzqInf_mesh=fem.SurfSetToMesh(surfSet=hastIzqInf,matSect=wall_mat,elemType='ShellMITC4',elemSize=eSize)
hastIzqCent_mesh=fem.SurfSetToMesh(surfSet=hastIzqCent,matSect=wall_mat,elemType='ShellMITC4',elemSize=eSize)
hastIzqSup_mesh=fem.SurfSetToMesh(surfSet=hastIzqSup,matSect=wall_mat,elemType='ShellMITC4',elemSize=eSize)
hastDerInf_mesh=fem.SurfSetToMesh(surfSet=hastDerInf,matSect=wall_mat,elemType='ShellMITC4',elemSize=eSize)
hastDerCent_mesh=fem.SurfSetToMesh(surfSet=hastDerCent,matSect=wall_mat,elemType='ShellMITC4',elemSize=eSize)
hastDerSup_mesh=fem.SurfSetToMesh(surfSet=hastDerSup,matSect=wall_mat,elemType='ShellMITC4',elemSize=eSize)
dintExt_mesh=fem.SurfSetToMesh(surfSet=dintExt,matSect=deck_mat,elemType='ShellMITC4',elemSize=eSize)
dintCent_mesh=fem.SurfSetToMesh(surfSet=dintCent,matSect=deck_mat,elemType='ShellMITC4',elemSize=eSize)

fem.multi_mesh(preprocessor=prep,lstMeshSets=[losCimExt_mesh,losCimCent_mesh,hastIzqInf_mesh,hastIzqCent_mesh,hastIzqSup_mesh,hastDerInf_mesh,hastDerCent_mesh,hastDerSup_mesh,dintExt_mesh,dintCent_mesh])

overallSet=prep.getSets.getSet('total')
overallSet.description='Marco'
losCim=losCimExt+losCimCent
losCim.description='Losa de cimentación'
hastiales=hastIzqInf+hastIzqCent+hastIzqSup+hastDerInf+hastDerCent+hastDerSup
hastiales.description='Hastiales'
dintel=dintExt+dintCent
dintel.description='Dintel'

#                       ***BOUNDARY CONDITIONS***
# Regions resting on springs (Winkler elastic foundation)
#       wModulus: Winkler modulus of the foundation (springs in Z direction)
#       cRoz:     fraction of the Winkler modulus to apply for friction in
#                 the contact plane (springs in X, Y directions)
#foundationElasticSupports=
from model.boundary_cond import spring_bound_cond as sprbc
from model.sets import sets_mng as sets
from materials import typical_materials as tm
from actions import loads
from actions import load_cases as lcases
from actions import combinations as cc
from actions.earth_pressure import earth_pressure as ep


#                       ***BOUNDARY CONDITIONS***
# Regions resting on springs (Winkler elastic foundation)
#       wModulus: Winkler modulus of the foundation (springs in Z direction)
#       cRoz:     fraction of the Winkler modulus to apply for friction in
#                 the contact plane (springs in X, Y directions)
cRoz=0.5
foundationElasticSupports=sprbc.ElasticFoundation(wModulus=Kbalasto,cRoz=cRoz)
foundationElasticSupports.generateSprings(xcSet=losCim)

#                       ***ACTIONS***
# Auxiliary ranges and sets
# Rellenos
rell_tali_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([0,0,lastZpos],[pxmnp1,lastYpos,lastZpos]),nameSet='rell_tali_set')
rell_i_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxmnp1,0,lastZpos],[pxcarr3-1,lastYpos,lastZpos]),nameSet='rell_i_set')
rell_d_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxcarr3-1,0,lastZpos],[pxmxp2,lastYpos,lastZpos]),nameSet='rell_d_set')
rell_tald_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxmxp2,0,lastZpos],[lastXpos,lastYpos,lastZpos]),nameSet='rell_tald_set')
#Balasto
bal_tali_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxmxp1,0,lastZpos],[pxcarr1-1,lastYpos,lastZpos]),nameSet='bal_tali_set')
bal_i_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxcarr1-1,0,lastZpos],[pxcarr3-1,lastYpos,lastZpos]),nameSet='bal_i_set')
bal_d_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxcarr3-1,0,lastZpos],[pxcarr4+1,lastYpos,lastZpos]),nameSet='bal_d_set')
bal_tald_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([pxcarr4+1,0,lastZpos],[pxmnp2,lastYpos,lastZpos]),nameSet='bal_tald_set')
#Losa cimentación interior marco
losc_int_set=gridGeom.getSetSurfOneRegion(ijkRange=gm.IJKRange([0,pyhast1,0],[lastXpos,pyhast2,0]),nameSet='losc_int_set')

#Inertial load (density*acceleration) applied to the elements in a set
grav=9.81 #Gravity acceleration (m/s2)
selfWeight= loads.InertialLoad(name='selfWeight', lstMeshSets=[hastIzqInf_mesh,hastIzqCent_mesh,hastIzqSup_mesh,hastDerInf_mesh,hastDerCent_mesh,hastDerSup_mesh,losCimCent_mesh,losCimExt_mesh,dintCent_mesh,dintExt_mesh,muretes_mesh], vAccel=xc.Vector( [0.0,0.0,-grav]))

# Uniform loads applied on shell elements
#    name:       name identifying the load
#    xcSet:     set that contains the surfaces
#    loadVector: xc.Vector with the six components of the load: 
#                xc.Vector([Fx,Fy,Fz,Mx,My,Mz]).
#    refSystem: reference system in which loadVector is defined:
#               'Local': element local coordinate system
#               'Global': global coordinate system (defaults to 'Global)

#     Dead load.
#relleno
cm_rell_tali=loads.UniformLoadOnSurfaces(name= 'cm_rell_tali',xcSet=rell_tali_set,loadVector= xc.Vector([0,0,-grav*densrell*Hrelli/2,0,0,0]),refSystem='Global')
cm_rell_i=loads.UniformLoadOnSurfaces(name= 'cm_rell_i',xcSet=rell_i_set,loadVector= xc.Vector([0,0,-grav*densrell*Hrelli,0,0,0]))
cm_rell_d=loads.UniformLoadOnSurfaces(name= 'cm_rell_d',xcSet=rell_d_set,loadVector= xc.Vector([0,0,-grav*densrell*Hrelld,0,0,0]))
cm_rell_tald=loads.UniformLoadOnSurfaces(name= 'cm_rell_tald',xcSet=rell_tald_set,loadVector= xc.Vector([0,0,-grav*densrell*Hrelld/2,0,0,0]))
#balasto        
cm_bal_tali=loads.UniformLoadOnSurfaces(name= 'cm_bal_tali',xcSet=bal_tali_set,loadVector= xc.Vector([0,0,-grav*densbal*Hbali/2]))
cm_bal_i=loads.UniformLoadOnSurfaces(name= 'cm_bal_i',xcSet=bal_i_set,loadVector= xc.Vector([0,0,-grav*densbal*Hbali,0,0,0]))
cm_bal_d=loads.UniformLoadOnSurfaces(name= 'cm_bal_d',xcSet=bal_d_set,loadVector= xc.Vector([0,0,-grav*densbal*Hbald,0,0,0]))
cm_bal_tald=loads.UniformLoadOnSurfaces(name= 'cm_bal_tald',xcSet=bal_tald_set,loadVector= xc.Vector([0,0,-grav*densbal*Hbald/2,0,0,0]))
            
#tren de cargas carreteras sobre losa cimentación
sc_unif_carr=loads.UniformLoadOnSurfaces(name='sc_unif_carr',xcSet=losc_int_set,loadVector= xc.Vector([0,0,-cunifCarr,0,0,0]))


# Superficie de reparto sobre el dintel de las cargas puntuales del tren de cargas
# en cada carril
angrep_rad=math.radians(angrep)
Qptren_carr=nQptren_carr*Qptren
L_Qptren_carr=(nQptren_carr-1)*distQptren_carr

def polygon(xCent,yCent,Lx,Ly):
    pol=geom.Poligono2d()
    pol.agregaVertice(geom.Pos2d(xCent-Lx/2.0,yCent-Ly/2.0))
    pol.agregaVertice(geom.Pos2d(xCent-Lx/2.0,yCent+Ly/2.0))
    pol.agregaVertice(geom.Pos2d(xCent+Lx/2.0,yCent+Ly/2.0))
    pol.agregaVertice(geom.Pos2d(xCent+Lx/2.0,yCent-Ly/2.0))
    return pol

def qLinYsobreMontera(prep,setBusq,hMont,angrepRad,x_coord,y_inic,y_fin,qLin,nameToLoad):
    '''Carga repartida sobre el dintel debida a una carga en línea sobre la montera '''
    Lx=hMont*math.tan(angrep_rad)
    Ly=y_fin-y_inic
    pol=polygon(xCent=x_coord,yCent=y_inic+Ly/2.0,Lx=Lx,Ly=Ly)
    aux_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=setBusq,prismBase=pol,prismAxis='Z',setName='aux_set')
    return loads.UniformLoadOnSurfaces(name=nameToLoad,xcSet=aux_set,loadVector=xc.Vector([0,0,-qLin/Lx,0,0,0]),refSystem='Global')
    
yCentAll=yList[pyhast1]+(yList[pyhast2]-yList[pyhast1])/2.0
y_inic_all=yCentAll-L_Qptren_carr/2.0
y_fin_all=yCentAll+L_Qptren_carr/2.0

Qptren_carr1=qLinYsobreMontera(prep=prep,setBusq=dintel,hMont=Hcarr1-hcarril,angrepRad=angrep_rad,x_coord=xList[pxcarr1],y_inic=y_inic_all,y_fin=y_fin_all,qLin=Qptren_carr/L_Qptren_carr,nameToLoad='Qptren_carr1')

quit()


#cargas puntuales en carril 1
Lycarr=2*(Hcarr1-hcarril)*math.tan(angrep_rad)
Lxcarr=L_Qptren_carr+Lycarr
poly_Qptren_carr1=polygon(xCent=xList[pxcarr1],yCent=yCentAll,Lx=Lxcarr,Ly=Lycarr)
Qptren_carr1_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_Qptren_carr1,prismAxis='Z',setName='Qptren_carr1_set')
Qptren_carr1=loads.UniformLoadOnSurfaces(name= 'Qptren_carr1',xcSet=Qptren_carr1_set,loadVector=xc.Vector([0,0,-Qptren_carr/poly_Qptren_carr1.getArea(),0,0,0]),refSystem='Global')

#cargas puntuales en carril 2
Lycarr=2*(Hcarr2-hcarril)*math.tan(angrep_rad)
Lxcarr=L_Qptren_carr+Lycarr
poly_Qptren_carr2=polygon(xCent=xList[pxcarr2],yCent=yCentAll,Lx=Lxcarr,Ly=Lycarr)
Qptren_carr2_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_Qptren_carr2,prismAxis='Z',setName='Qptren_carr2_set')
Qptren_carr2=loads.UniformLoadOnSurfaces(name= 'Qptren_carr2',xcSet=Qptren_carr2_set,loadVector=xc.Vector([0,0,-Qptren_carr/poly_Qptren_carr2.getArea(),0,0,0]),refSystem='Global')

#cargas puntuales en carril 3
Lycarr=2*(Hcarr3-hcarril)*math.tan(angrep_rad)
Lxcarr=L_Qptren_carr+Lycarr
poly_Qptren_carr3=polygon(xCent=xList[pxcarr3],yCent=yCentAll,Lx=Lxcarr,Ly=Lycarr)
Qptren_carr3_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_Qptren_carr3,prismAxis='Z',setName='Qptren_carr3_set')
Qptren_carr3=loads.UniformLoadOnSurfaces(name= 'Qptren_carr3',xcSet=Qptren_carr3_set,loadVector=xc.Vector([0,0,-Qptren_carr/poly_Qptren_carr3.getArea(),0,0,0]),refSystem='Global')

#cargas puntuales en carril 4
Lycarr=2*(Hcarr4-hcarril)*math.tan(angrep_rad)
Lxcarr=L_Qptren_carr+Lycarr
poly_Qptren_carr4=polygon(xCent=xList[pxcarr4],yCent=yCentAll,Lx=Lxcarr,Ly=Lycarr)
Qptren_carr4_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_Qptren_carr4,prismAxis='Z',setName='Qptren_carr4_set')
Qptren_carr4=loads.UniformLoadOnSurfaces(name= 'Qptren_carr4',xcSet=Qptren_carr4_set,loadVector=xc.Vector([0,0,-Qptren_carr/poly_Qptren_carr4.getArea(),0,0,0]),refSystem='Global')

#carga muerta carril + traviesa
yCentAll=yList[pyhast1]+(yList[pyhast2]-yList[pyhast1])/2.0
Lyall=yList[pyhast2]-yList[pyhast1]
# carril + traviesa 1
Lxcarr=2*(Hcarr1-hcarril)*math.tan(angrep_rad)
poly_carr_trav_carr1=polygon(xCent=xList[pxcarr1],yCent=yCentAll,Lx=Lxcarr,Ly=Lyall)
carr_trav_carr1_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_carr_trav_carr1,prismAxis='Z',setName='carr_trav_carr1_set')
cm_carr_trav_carr1=loads.UniformLoadOnSurfaces(name= 'cm_carr_trav_carr1',xcSet=carr_trav_carr1_set,loadVector=xc.Vector([0,0,-ql_carr_trav/Lxcarr,0,0,0]),refSystem='Global')

# carril + traviesa 2
Lxcarr=2*(Hcarr2-hcarril)*math.tan(angrep_rad)
poly_carr_trav_carr2=polygon(xCent=xList[pxcarr2],yCent=yCentAll,Lx=Lxcarr,Ly=Lyall)
carr_trav_carr2_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_carr_trav_carr2,prismAxis='Z',setName='carr_trav_carr2_set')
cm_carr_trav_carr2=loads.UniformLoadOnSurfaces(name= 'cm_carr_trav_carr2',xcSet=carr_trav_carr2_set,loadVector=xc.Vector([0,0,-ql_carr_trav/Lxcarr,0,0,0]),refSystem='Global')

# carril + traviesa 3
Lxcarr=2*(Hcarr3-hcarril)*math.tan(angrep_rad)
poly_carr_trav_carr3=polygon(xCent=xList[pxcarr3],yCent=yCentAll,Lx=Lxcarr,Ly=Lyall)
carr_trav_carr3_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_carr_trav_carr3,prismAxis='Z',setName='carr_trav_carr3_set')
cm_carr_trav_carr3=loads.UniformLoadOnSurfaces(name= 'cm_carr_trav_carr3',xcSet=carr_trav_carr3_set,loadVector=xc.Vector([0,0,-ql_carr_trav/Lxcarr,0,0,0]),refSystem='Global')

# carril + traviesa 4
Lxcarr=2*(Hcarr4-hcarril)*math.tan(angrep_rad)
poly_carr_trav_carr4=polygon(xCent=xList[pxcarr4],yCent=yCentAll,Lx=Lxcarr,Ly=Lyall)
carr_trav_carr4_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_carr_trav_carr4,prismAxis='Z',setName='carr_trav_carr4_set')
cm_carr_trav_carr4=loads.UniformLoadOnSurfaces(name= 'cm_carr_trav_carr4',xcSet=carr_trav_carr4_set,loadVector=xc.Vector([0,0,-ql_carr_trav/Lxcarr,0,0,0]),refSystem='Global')

#carga muerta canal de cables
yCentAll=yList[pyhast1]+(yList[pyhast2]-yList[pyhast1])/2.0
Lyall=yList[pyhast2]-yList[pyhast1]
  # canal de cables izq.
Lxcarr=2*Hrelli*math.tan(angrep_rad)
poly_can_cabl_i=polygon(xCent=xList[pxcan1],yCent=yCentAll,Lx=Lxcarr,Ly=Lyall)
can_cabl_i_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_can_cabl_i,prismAxis='Z',setName='can_cabl_i_set')
cm_can_cabl_i=loads.UniformLoadOnSurfaces(name= 'cm_can_cabl_i',xcSet=can_cabl_i_set,loadVector=xc.Vector([0,0,-ql_can_cabl/Lxcarr,0,0,0]),refSystem='Global')
  # canal de cables der.
Lxcarr=2*Hrelld*math.tan(angrep_rad)
poly_can_cabl_d=polygon(xCent=xList[pxcan2],yCent=yCentAll,Lx=Lxcarr,Ly=Lyall)
can_cabl_d_set=sets.set_included_in_orthoPrism(preprocessor=prep,setInit=dintel,prismBase=poly_can_cabl_d,prismAxis='Z',setName='can_cabl_d_set')
cm_can_cabl_d=loads.UniformLoadOnSurfaces(name= 'cm_can_cabl_d',xcSet=can_cabl_d_set,loadVector=xc.Vector([0,0,-ql_can_cabl/Lxcarr,0,0,0]),refSystem='Global')

# sobrecargas sobre dintel debidas ala carga lineal del tren de cargas ferroviario
   #en carril 1

# Load acting on one or several nodes
#     name:       name identifying the load
#     lstNod:     list of nodes  on which the load is applied
#     loadVector: xc.Vector with the six components of the load: 
#                 xc.Vector([Fx,Fy,Fz,Mx,My,Mz]).

#  cargas puntuales tren de carreteras
def trafficPointLoads(centerTruck):
    xc=centerTruck.x
    yc=centerTruck.y
    zc=centerTruck.z
    p1=geom.Pos3d(xc-lejesCarr,yc-lruedCarr/2.0,zc)
    p2=geom.Pos3d(xc-lejesCarr,yc+lruedCarr/2.0,zc)
    p3=geom.Pos3d(xc,yc-lruedCarr/2.0,zc)
    p4=geom.Pos3d(xc,yc+lruedCarr/2.0,zc)
    p5=geom.Pos3d(xc+lejesCarr,yc-lruedCarr/2.0,zc)
    p6=geom.Pos3d(xc+lejesCarr,yc+lruedCarr/2.0,zc)
    nodLst=sets.get_lstNod_from_lst3DPos(preprocessor=prep,lst3DPos=[p1,p2,p3,p4,p5,p6])
    return nodLst
centTr=geom.Pos3d((xList[-1]-xList[0])/2.0,(yList[-1]-yList[0])/2.0,zList[0])
qp_carr=loads.NodalLoad(name='qp_carr',lstNod=trafficPointLoads(centTr),loadVector=xc.Vector([0,0,-qpCarr,0,0,0]))
